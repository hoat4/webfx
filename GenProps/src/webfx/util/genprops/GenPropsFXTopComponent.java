/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package webfx.util.genprops;

import java.awt.Color;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JFrame;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//webfx.util.genprops//GenPropsFX//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "GenPropsFXTopComponent",
        iconBase = "webfx/util/genprops/icon.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "properties", openAtStartup = false)
@ActionID(category = "Window", id = "webfx.util.genprops.GenPropsFXTopComponent")
@ActionReference(path = "Menu/Source" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_GenPropsFXAction",
        preferredID = "GenPropsFXTopComponent"
)
@Messages({
    "CTL_GenPropsFXAction=GenProps",
    "CTL_GenPropsFXTopComponent=GenProps",
    "HINT_GenPropsFXTopComponent="
})
public final class GenPropsFXTopComponent extends TopComponent implements DocumentListener {

    private final Map<String, String> map = new HashMap<String, String>();

    private void initMap() {
        map.put("String", "StringProperty");
        map.put("int", "IntegerProperty");
        map.put("Integer", "IntegerProperty");
        map.put("double", "DoubleProperty");
        map.put("Double", "DoubleProperty");
    }

    public GenPropsFXTopComponent() {
        initComponents();
        setName(Bundle.CTL_GenPropsFXTopComponent());
        setToolTipText(Bundle.HINT_GenPropsFXTopComponent());
        initMap();
        nameField.getDocument().addDocumentListener(this);
        typeField.getDocument().addDocumentListener(this);
        classNameField.getDocument().addDocumentListener(this);
        defValField.getDocument().addDocumentListener(this);
        run();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        typeField = new javax.swing.JTextField();
        readOnlyCheckbox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultArea = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        enableFluent = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        defValField = new javax.swing.JTextField();
        classNameField = new javax.swing.JTextField();

        nameField.setText(org.openide.util.NbBundle.getMessage(GenPropsFXTopComponent.class, "GenPropsFXTopComponent.nameField.text")); // NOI18N
        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });
        nameField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                nameFieldPropertyChange(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(GenPropsFXTopComponent.class, "GenPropsFXTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(GenPropsFXTopComponent.class, "GenPropsFXTopComponent.jLabel2.text")); // NOI18N

        typeField.setText(org.openide.util.NbBundle.getMessage(GenPropsFXTopComponent.class, "GenPropsFXTopComponent.typeField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(readOnlyCheckbox, org.openide.util.NbBundle.getMessage(GenPropsFXTopComponent.class, "GenPropsFXTopComponent.readOnlyCheckbox.text")); // NOI18N
        readOnlyCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readOnlyCheckboxActionPerformed(evt);
            }
        });

        resultArea.setColumns(20);
        resultArea.setRows(5);
        jScrollPane1.setViewportView(resultArea);

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(GenPropsFXTopComponent.class, "GenPropsFXTopComponent.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(GenPropsFXTopComponent.class, "GenPropsFXTopComponent.label.fluentgenerator"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(enableFluent, org.openide.util.NbBundle.getMessage(GenPropsFXTopComponent.class, "GenPropsFXTopComponent.enableFluent.text")); // NOI18N
        enableFluent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableFluentActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(GenPropsFXTopComponent.class, "GenPropsFXTopComponent.label.className")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(GenPropsFXTopComponent.class, "GenPropsFXTopComponent.label.defVal")); // NOI18N

        defValField.setText(org.openide.util.NbBundle.getMessage(GenPropsFXTopComponent.class, "GenPropsFXTopComponent.defValField.text")); // NOI18N

        classNameField.setText(org.openide.util.NbBundle.getMessage(GenPropsFXTopComponent.class, "GenPropsFXTopComponent.classNameField.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(enableFluent, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(defValField)
                            .addComponent(classNameField))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(enableFluent)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(classNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(defValField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameField)
                            .addComponent(typeField)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(readOnlyCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(typeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(readOnlyCheckbox)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed

    }//GEN-LAST:event_nameFieldActionPerformed

    private void nameFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_nameFieldPropertyChange
        System.out.println("propchange");
    }//GEN-LAST:event_nameFieldPropertyChange

    private void readOnlyCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readOnlyCheckboxActionPerformed
        run();
    }//GEN-LAST:event_readOnlyCheckboxActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        StringSelection data = new StringSelection(resultArea.getText());
        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(data, data);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void enableFluentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableFluentActionPerformed
        run();
    }//GEN-LAST:event_enableFluentActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField classNameField;
    private javax.swing.JTextField defValField;
    private javax.swing.JCheckBox enableFluent;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameField;
    private javax.swing.JCheckBox readOnlyCheckbox;
    private javax.swing.JTextArea resultArea;
    private javax.swing.JTextField typeField;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void run() {
        try {
            StringBuilder sb = new StringBuilder();
            String type = typeField.getText();
            String fxPropName = map.get(type);
            String name = nameField.getText();
            if (name.isEmpty()) {
                resultArea.setText(NbBundle.getMessage(getClass(), "GenPropsFXTopComponent.error.noname"));
                resultArea.setForeground(Color.red);
                return;
            }
            if (type.isEmpty()) {
                resultArea.setText(NbBundle.getMessage(getClass(), "GenPropsFXTopComponent.error.notype"));
                resultArea.setForeground(Color.red);
                return;
            }
            if (enableFluent.isSelected()) {
                runFluent(name, type, sb);
            } else {
                runFX(name, fxPropName, type, sb);
            }
            resultArea.setText(sb.toString());
            resultArea.setForeground(Color.black);
        } catch (Exception e) {
            StringWriter sw = new StringWriter();
            e.printStackTrace(new PrintWriter(sw));
            resultArea.setText(sw.toString());
            resultArea.setForeground(Color.red);
        }
    }

    private void runFX(String name, String fxPropName, String type, StringBuilder sb) {
        String name2 = name.substring(0, 1).toUpperCase() + name.substring(1);
        boolean isReadOnly = readOnlyCheckbox.isSelected();
        if (fxPropName == null) {
            fxPropName = "ObjectProperty<" + type + '>';
        }
        String fxPropName2, fxPublicPropName;
        if (isReadOnly) {
            fxPropName2 = "ReadOnly" + fxPropName.replace("Property", "Wrapper");
            fxPublicPropName = "ReadOnly" + fxPropName;
        } else {
            fxPropName2 = "Simple" + fxPropName;
            fxPublicPropName = fxPropName;
        }
        sb.append("    private final ").append(fxPropName2).append(' ').append(name).append(" = new ").
                append(fxPropName2).append("(this, \"").append(name).append("\");\n");
        sb.append('\n');
        sb.append("    public ").append(type).append(" get").append(name2).append("() {\n");
        sb.append("        return ").append(name).append(".get();\n");
        sb.append("    }\n");
        sb.append('\n');
        if (!isReadOnly) {
            sb.append("    public void set").append(name2).append('(').append(type).append(" value) {\n");
            sb.append("        ").append(name).append(".set(value);\n");
            sb.append("    }\n");
            sb.append('\n');
        }
        sb.append("    public ").append(fxPublicPropName).append(' ').append(name).append("Property() {\n");
        sb.append("        return ").append(name).append(isReadOnly ? ".getReadOnlyProperty();\n" : ";\n");
        sb.append("    }\n");
        sb.append('\n');
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        run();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        run();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        run();
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame();
        frame.setBounds(100, 100, 400, 300);
        frame.add(new GenPropsFXTopComponent());
        frame.setVisible(true);
    }

    private void runFluent(String name, String type, StringBuilder sb) {
        String clName = classNameField.getText();
        String uppercaseName = toConstantName(name);
        String defVal = defValField.getText();

        if (clName.isEmpty()) {
            clName = null;
        }

        if (!defVal.isEmpty()) {
            sb.append("    private static final ").append(type).append(" DEFAULT_").append(uppercaseName).append(" = ").append(defVal).append(";\n");
            sb.append("    private ").append(type).append(" ").append(name).append(" = DEFAULT_").append(uppercaseName).append(";\n");
        } else {
            sb.append("    private ").append(type).append(" ").append(name).append(";\n");
        }
        sb.append('\n');
        if (!readOnlyCheckbox.isSelected()) {
            sb.append("    public ").append(clName == null ? "void" : clName).append(" ").append(name).append("(").append(type).append(" ").append(name).append(") {\n");
            if (!defVal.isEmpty()) {
                sb.append("        if (").append(name).append(" == null) \n");
                sb.append("            this.name = DEFAULT_").append(uppercaseName).append(";\n");
                sb.append("        else\n    ");
            }
            sb.append("        this.").append(name).append(" = ").append(name).append(";\n");
            if (clName != null) {
                sb.append("        return this;\n");
            }
            sb.append("    }\n");
            sb.append('\n');
        }
        sb.append("    public ").append(type).append(" ").append(name).append("() {\n");
        sb.append("        return ").append(name).append(";\n");
        sb.append("    }\n");
        sb.append("\n");
    }

    private static String toConstantName(String origName) {
        StringBuilder sb = new StringBuilder();
        for (char ch : origName.toCharArray()) {
            if (Character.isUpperCase(ch)) {
                sb.append('_');
            }
            sb.append(Character.toUpperCase(ch));
        }
        return sb.toString();
    }
}
